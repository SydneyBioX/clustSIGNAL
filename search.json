[{"path":"https://sydneybiox.github.io/clustSIGNAL/articles/clustSIGNAL.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"ClustSIGNAL tutorial","text":"vignette, demonstrate perform spatially-resolved clustering ClustSIGNAL. Following , explore clusters using pre-defined metrics like adjusted rand index (ARI) normalized mutual information (NMI), well spatial plots visualize clusters. also display use entropy measures generated -product ClustSIGNAL process understanding tissue structure sample. end, explore multisample analysis ClustSIGNAL, learn use individual functions package perform step--step clustering analysis ClustSIGNAL.","code":"# load required packages library(clustSIGNAL) ## Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  ##   object 'type_sum.accel' not found library(distances) library(cluster) library(aricode) library(dplyr) library(ggplot2) library(patchwork) library(scattermore) library(scater)"},{"path":"https://sydneybiox.github.io/clustSIGNAL/articles/clustSIGNAL.html","id":"single-sample-analysis-with-clustsignal","dir":"Articles","previous_headings":"","what":"Single sample analysis with ClustSIGNAL","title":"ClustSIGNAL tutorial","text":", use SeqFISH mouse embryo dataset Lohoff et al, 2021 , contains spatial transcriptomics data 3 mouse embryos, 351 genes total 57,536 cells. vignette, subset data randomly selecting 5000 cells Embryo 2, excluding cells manually annotated ‘Low quality’. begin creating SpatialExperiment object gene expression cell information data subset, ensuring spatial coordinates stored spatialCoords within SpatialExperiment object. data already SpatialExperiment object, user can directly run ClustSIGNAL, ensuring basic requirements like spatial coordinates, normalized counts, unique cell names met. running ClustSIGNAL, need know column name colData SpatialExperiment object contain sample labels. , sample labels ‘sample_id’ column.","code":"data(mEmbryo2) # this will load me_expr and me_data objects, containing gene expression  # logcounts and cell metadata, respectively, to your environment # to create a SpatialExperiment object we need gene expression, cell metadata,  # and cell locations spe <- SpatialExperiment(assays = list(logcounts = me_expr), colData = me_data,                          # spatialCoordsNames requires column names in                           # me_data that contain xy-coordinates of cells                          spatialCoordsNames = c(\"X\", \"Y\")) spe ## class: SpatialExperiment  ## dim: 351 5000  ## metadata(0): ## assays(1): logcounts ## rownames(351): Abcc4 Acp5 ... Zfp57 Zic3 ## rowData names(0): ## colnames(5000): embryo2_Pos29_cell100_z2 embryo2_Pos29_cell101_z5 ... ##   embryo2_Pos50_cell97_z5 embryo2_Pos50_cell99_z5 ## colData names(4): uniqueID pos celltype_mapped_refined sample_id ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## spatialCoords names(2) : X Y ## imgData names(0): spe |> colData() |> colnames() # to list the column names in the metadata ## [1] \"uniqueID\"                \"pos\"                     ## [3] \"celltype_mapped_refined\" \"sample_id\""},{"path":"https://sydneybiox.github.io/clustSIGNAL/articles/clustSIGNAL.html","id":"running-clustsignal-on-one-sample","dir":"Articles","previous_headings":"","what":"Running ClustSIGNAL on one sample","title":"ClustSIGNAL tutorial","text":"Next, run ClustSIGNAL using sample labels identified earlier. simplest ClustSIGNAL run requires SpatialExperiment object, one variable holding colData column name sample labels, type output user like. parameters can modified include dimRed specify low dimension data use, batch perform batch correction, batch_by indicate sample batches contributing batch effect, NN specify neighbourhood size, kernel weight distribution use, spread distribution spread value, sort sort neighbourhood, threads specify number cpus use parallel runs, clustParams specify clustering parameters. Furthermore, adaptively smoothed gene expression data generated ClustSIGNAL useful downstream analyses accessible user choose output final SpatialExperiment object. returns list contains dataframe cluster names, matrix cell labels region’s neighbourhood, final SpatialExperiment object. cluster dataframe contains cell labels cluster numbers allotted ClustSIGNAL. final SpatialExperiment object contains adaptively smoothed gene expression data additional assay, well initial clusters, entropy values, ClustSIGNAL clusters.","code":"set.seed(100) # for reproducibility samples <- \"sample_id\" # column name containing sample names # the simplest run of ClustSIGNAL requires data in a SpatialExperiment object, # with column name for sample labels specified, along with the type # of output to generate (clusters, neighbours, and/or final spe object). res_emb <- clustSIGNAL(spe, samples, outputs = \"a\") ## [1] \"Calculating PCA. Time 23:17:05\" ## [1] \"ClustSIGNAL run started. Time 23:17:06\" ## [1] \"Initial nonspatial clustering performed. Clusters = 11 Time 23:17:07\" ## [1] \"Nonspatial subclustering performed. Subclusters = 50 Time 23:17:08\" ## [1] \"Regions defined. Time 23:17:11\" ## [1] \"Region domainness calculated. Time 23:17:11\" ## [1] \"Smoothing performed. NN = 30 Kernel = G Spread = 0.05 Time 23:17:12\" ## [1] \"Nonspatial clustering performed on smoothed data. Clusters = 16 Time 23:17:13\" ## [1] \"ClustSIGNAL run completed. 23:17:13\" ## Time difference of 8.055563 secs res_emb |> names() # listing the names of the outputs generated ## [1] \"clusters\"   \"neighbours\" \"spe_final\" res_emb$clusters |> head() # cluster data frame has cell IDs and cluster labels ##                      Cells Clusters ## 1 embryo2_Pos29_cell100_z2       13 ## 2 embryo2_Pos29_cell101_z5       13 ## 3 embryo2_Pos29_cell104_z2       13 ## 4 embryo2_Pos29_cell104_z5       13 ## 5 embryo2_Pos29_cell105_z2       13 ## 6 embryo2_Pos29_cell108_z5       13 # for convenience with downstream analyses, we can replace the original spe # object with the one generated by ClustSIGNAL. This does not lead to any loss  # of information as ClustSIGNAL only adds information to the spe object. spe <- res_emb$spe_final spe ## class: SpatialExperiment  ## dim: 351 5000  ## metadata(0): ## assays(2): logcounts smoothed ## rownames(351): Abcc4 Acp5 ... Zfp57 Zic3 ## rowData names(0): ## colnames(5000): embryo2_Pos29_cell100_z2 embryo2_Pos29_cell101_z5 ... ##   embryo2_Pos50_cell97_z5 embryo2_Pos50_cell99_z5 ## colData names(8): uniqueID pos ... entropy ClustSIGNAL ## reducedDimNames(2): PCA PCA.smooth ## mainExpName: NULL ## altExpNames(0): ## spatialCoords names(2) : X Y ## imgData names(1): sample_id"},{"path":"https://sydneybiox.github.io/clustSIGNAL/articles/clustSIGNAL.html","id":"analysing-clustsignal-results","dir":"Articles","previous_headings":"","what":"Analysing ClustSIGNAL results","title":"ClustSIGNAL tutorial","text":"section, analyse results ClustSIGNAL spatial plots clustering metrics.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/articles/clustSIGNAL.html","id":"visualising-clustsignal-clusters","dir":"Articles","previous_headings":"Analysing ClustSIGNAL results","what":"Visualising ClustSIGNAL clusters","title":"ClustSIGNAL tutorial","text":"use spatial coordinates cells cluster labels entropy values visualize clustering output.  spatial location () entropy distribution (B) clusters provide spatial context cells neighbourhoods, well compositions neighbourhoods. example, low entropy cluster 4 indicates cells cluster generally found space homogeneous, whereas high entropy cluster 7 cells indicates belong regions might cell diversity. can also visualized spatial plot.","code":"colors <- c(\"#635547\", \"#8EC792\", \"#9e6762\", \"#FACB12\", \"#3F84AA\", \"#0F4A9C\",              \"#ff891c\", \"#EF5A9D\", \"#C594BF\", \"#DFCDE4\", \"#139992\", \"#65A83E\",              \"#8DB5CE\", \"#005579\", \"#C9EBFB\", \"#B51D8D\", \"#532C8A\", \"#8870ad\",              \"#cc7818\", \"#FBBE92\", \"#EF4E22\", \"#f9decf\", \"#c9a997\", \"#C72228\",              \"#f79083\", \"#F397C0\", \"#DABE99\", \"#c19f70\", \"#354E23\", \"#C3C388\",             \"#647a4f\", \"#CDE088\", \"#f7f79e\", \"#F6BFCB\", \"#7F6874\", \"#989898\",              \"#1A1A1A\", \"#FFFFFF\", \"#e6e6e6\", \"#77441B\", \"#F90026\", \"#A10037\",              \"#DA5921\", \"#E1C239\", \"#9DD84A\") # for plotting with scater R package, we need to add the spatial coordinates  # to the reduced dimension section of the spe object reducedDim(spe, \"spatial\") <- spatialCoords(spe)  # spatial plot spt_clust <- scater::plotReducedDim(spe, colour_by = \"ClustSIGNAL\",                                     # specify spatial low dimension                                     dimred = \"spatial\", point_alpha = 1,                                     point_size = 4, scattermore = TRUE) +   ggtitle(\"A\") +   scale_color_manual(values = colors) +   guides(colour = guide_legend(title = \"Clusters\",                                override.aes = list(size = 5))) +   theme(text = element_text(size = 12)) ## Scale for colour is already present. ## Adding another scale for colour, which will replace the existing scale. # we can also display the entropy distribution at cluster-level to see which  # clusters have cells from homogeneous/heterogeneous space. For this, we # reorder the clusters by their median entropy value  df_met <- spe |> colData() %>% as.data.frame()  ct_ent <- df_met %>%   group_by(as.character(ClustSIGNAL)) %>%   summarise(mdEntropy = median(entropy)) cellOrder <- ct_ent$mdEntropy names(cellOrder) <- ct_ent$`as.character(ClustSIGNAL)` cellOrder <- sort(cellOrder)  df_met$ClustSIGNAL <- factor(df_met$ClustSIGNAL, levels = names(cellOrder)) col_ent <- colors[as.numeric(names(cellOrder))] box_clust <- df_met %>%   ggplot(aes(x = ClustSIGNAL, y = entropy, fill = ClustSIGNAL)) +   geom_boxplot() +   scale_fill_manual(values = col_ent) +   ggtitle(\"B\") +   labs(x = \"ClustSIGNAL clusters\", y = \"Entropy\", name = \"Clusters\") +   theme_classic() +   theme(legend.position = \"none\",         text = element_text(size = 12),         axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))  spt_clust + box_clust + patchwork::plot_layout(guides = \"collect\",                                                 widths = c(2, 3))"},{"path":"https://sydneybiox.github.io/clustSIGNAL/articles/clustSIGNAL.html","id":"cluster-metrics","dir":"Articles","previous_headings":"Analysing ClustSIGNAL results","what":"Cluster metrics","title":"ClustSIGNAL tutorial","text":"assess clustering efficiency ClustSIGNAL using commonly used clustering metrics ARI NMI. ARI NMI usable prior cell annotation information available, assume cell annotation ground truth. , ARI NMI measure similarity agreement (respectively) cluster labels obtained ClustSIGNAL manual cell annotation labels.","code":"# to assess the accuracy of clustering, the cluster labels are often compared to # prior annotations. Here we compare ClustSIGNAL cluster labels to annotations  # available with this public data spe |> colData() %>%    as.data.frame() %>%   summarise(     ARI = aricode::ARI(celltype_mapped_refined, ClustSIGNAL), # calculate ARI     NMI = aricode::NMI(celltype_mapped_refined, ClustSIGNAL)) # calculate NMI ##         ARI       NMI ## 1 0.3420434 0.6281433"},{"path":"https://sydneybiox.github.io/clustSIGNAL/articles/clustSIGNAL.html","id":"entropy-spread-and-distribution","dir":"Articles","previous_headings":"Analysing ClustSIGNAL results","what":"Entropy spread and distribution","title":"ClustSIGNAL tutorial","text":"entropy values generated ClustSIGNAL process can useful analyzing sample structure. entropy range can indicate whether tissue sample contains homogeneous domain-like structures. example, minimum entropy value 0, means cells placed completely homogeneous space looking neighbourhood size 30 cells (NN = 30 used generating entropy data). Moreover, mean entropy value low, can interpreted tissue least domain-like structures.  spread () spatial distribution (B) region entropy measures can useful assessing tissue composition samples - low entropy regions homogeneous domain-like structure, whereas high entropy regions heterogeneous uniform distribution cells.","code":"# we can assess the overall entropy distribution of the dataset spe |> colData() %>%    as.data.frame() %>%   summarise(min_Entropy = min(entropy),             max_Entropy = max(entropy),             mean_Entropy = mean(entropy)) ##   min_Entropy max_Entropy mean_Entropy ## 1           0     3.05603      1.37066 # we can also visualize the distribution and spread of the entropy values in  # the sample(s) hst_ent <- spe |> colData() %>%    as.data.frame() %>%   ggplot(aes(entropy)) +   geom_histogram(binwidth = 0.05) +   ggtitle(\"A\") +   labs(x = \"Entropy\", y = \"Number of regions\") +   theme_classic() +   theme(text = element_text(size = 12))  spt_ent <- scater::plotReducedDim(spe, colour_by = \"entropy\",                                     # specify spatial low dimension                                     dimred = \"spatial\", point_alpha = 1,                                     point_size = 4, scattermore = TRUE) +   ggtitle(\"B\") +   scale_colour_gradient2(\"Entropy\", low = \"grey\", high = \"blue\") +   scale_size_continuous(range = c(0, max(spe$entropy))) +   theme(text = element_text(size = 12)) ## Scale for colour is already present. ## Adding another scale for colour, which will replace the existing scale. hst_ent + spt_ent"},{"path":"https://sydneybiox.github.io/clustSIGNAL/articles/clustSIGNAL.html","id":"multisample-analysis-with-clustsignal","dir":"Articles","previous_headings":"","what":"Multisample analysis with ClustSIGNAL","title":"ClustSIGNAL tutorial","text":", use MERFISH mouse hypothalamus preoptic region dataset Moffitt et al, 2018, contains spatial transcriptomics data 181 samples, 155 genes total 1,027,080 cells. vignette, subset data selecting total 6000 random cells 3 samples - Animal 1 Bregma -0.09 (2080 cells), Animal 7 Bregma 0.16 (1936 cells), Animal 7 Bregma -0.09 (1984 cells), excluding cells manually annotated ‘Ambiguous’ 20 genes assessed using different technology. start analysis creating SpatialExperiment object gene expression cell information data subset, ensuring spatial coordinates stored spatialCoords within SpatialExperiment object. , sample labels ‘samples’ column SpatialExperiment object.","code":"# this will load mh_expr and mh_data objects, containing gene expression  # logcounts and cell metadata, respectively, to your environment data(mHypothal)  # creates spe object using gene expression, cell metadata, and cell locations spe2 <- SpatialExperiment(assays = list(logcounts = mh_expr), colData = mh_data,                           # spatialCoordsNames requires column names in                            # mh_data that contain xy-coordinates of cells                           spatialCoordsNames = c(\"X\", \"Y\")) spe2 ## class: SpatialExperiment  ## dim: 135 6000  ## metadata(0): ## assays(1): logcounts ## rownames(135): Ace2 Adora2a ... Ttn Ttyh2 ## rowData names(0): ## colnames(6000): 74d3f69d-e8f2-4c33-a8ca-fac3eb65e55a ##   41158ddc-e70c-487b-b891-0cb3c8452555 ... ##   54145623-7071-482c-b9da-d0d2dd31274a ##   96bc85ce-b993-4fb1-8e0c-165f83f0cfd0 ## colData names(4): Cell_ID Cell_class sample_id samples ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## spatialCoords names(2) : X Y ## imgData names(0): spe2 |> colData() |> colnames() # to list the column names in the metadata ## [1] \"Cell_ID\"    \"Cell_class\" \"sample_id\"  \"samples\""},{"path":"https://sydneybiox.github.io/clustSIGNAL/articles/clustSIGNAL.html","id":"clustsignal-run","dir":"Articles","previous_headings":"Multisample analysis with ClustSIGNAL","what":"ClustSIGNAL run","title":"ClustSIGNAL tutorial","text":"One important concepts take account running multisample analysis batch effects. gathering samples different sources different technologies/procedures, technical batch effects might introduced dataset. can run ClustSIGNAL batch correction mode simply setting batch = TRUE. method uses harmony internally batch correction. users also need specify group like batch correct.","code":"set.seed(110) # for reproducibility samples <- \"samples\" # column name containing sample names # ClustSIGNAL can be run on a dataset with multiple samples. As before, we need # the SpatialExperiment object and column name of sample labels in the object.  # The method can be run in parallel through the threads option. Here we use  # thread = 4 to use 4 cores. res_hyp <- clustSIGNAL(spe2, samples, threads = 4, outputs = \"a\") ## [1] \"Calculating PCA. Time 23:17:16\" ## [1] \"ClustSIGNAL run started. Time 23:17:16\" ## [1] \"Initial nonspatial clustering performed. Clusters = 11 Time 23:17:17\" ## [1] \"Nonspatial subclustering performed. Subclusters = 52 Time 23:17:19\" ## [1] \"Regions defined. Time 23:17:22\" ## [1] \"Region domainness calculated. Time 23:17:23\" ## [1] \"Smoothing performed. NN = 30 Kernel = G Spread = 0.05 Time 23:17:23\" ## [1] \"Nonspatial clustering performed on smoothed data. Clusters = 11 Time 23:17:25\" ## [1] \"ClustSIGNAL run completed. 23:17:25\" ## Time difference of 8.982714 secs # for convenience with downstream analyses, we replace the original spe object  # with the one generated by ClustSIGNAL spe2 <- res_hyp$spe_final spe2 ## class: SpatialExperiment  ## dim: 135 6000  ## metadata(0): ## assays(2): logcounts smoothed ## rownames(135): Ace2 Adora2a ... Ttn Ttyh2 ## rowData names(0): ## colnames(6000): 74d3f69d-e8f2-4c33-a8ca-fac3eb65e55a ##   41158ddc-e70c-487b-b891-0cb3c8452555 ... ##   54145623-7071-482c-b9da-d0d2dd31274a ##   96bc85ce-b993-4fb1-8e0c-165f83f0cfd0 ## colData names(8): Cell_ID Cell_class ... entropy ClustSIGNAL ## reducedDimNames(2): PCA PCA.smooth ## mainExpName: NULL ## altExpNames(0): ## spatialCoords names(2) : X Y ## imgData names(1): sample_id"},{"path":"https://sydneybiox.github.io/clustSIGNAL/articles/clustSIGNAL.html","id":"clustering-metrics","dir":"Articles","previous_headings":"Multisample analysis with ClustSIGNAL","what":"Clustering metrics","title":"ClustSIGNAL tutorial","text":"Clustering entropy results can calculated visualized sample. ClustSIGNAL works well samples uniform distribution cells.","code":"samplesList <- spe2[[samples]] |> unique() # get unique sample names samplesList ## [1] 1.-0.09 7.0.16  7.-0.09 ## Levels: 1.-0.09 7.-0.09 7.0.16 # Here we compare ClustSIGNAL cluster labels to annotations available with this  # public data to assess its accuracy. We also assess the overall entropy  # distribution of the samples in the dataset spe2 |> colData() %>%    as.data.frame() %>%   group_by(samples) %>%   # group cells by samples and for cells in each sample    # calculate the following metrics   summarise(ARI = aricode::ARI(Cell_class, ClustSIGNAL),             NMI = aricode::NMI(Cell_class, ClustSIGNAL),             min_Entropy = min(entropy),             max_Entropy = max(entropy),             mean_Entropy = mean(entropy)) ## # A tibble: 3 × 6 ##   samples   ARI   NMI min_Entropy max_Entropy mean_Entropy ##   <fct>   <dbl> <dbl>       <dbl>       <dbl>        <dbl> ## 1 1.-0.09 0.445 0.624       1.32         4.42         3.30 ## 2 7.-0.09 0.511 0.679       0.970        4.64         3.30 ## 3 7.0.16  0.645 0.744       0.970        4.42         3.26"},{"path":"https://sydneybiox.github.io/clustSIGNAL/articles/clustSIGNAL.html","id":"visualizing-clustsignal-clusters","dir":"Articles","previous_headings":"Multisample analysis with ClustSIGNAL","what":"Visualizing ClustSIGNAL clusters","title":"ClustSIGNAL tutorial","text":"ClustSIGNAL performs clustering cells dataset one run, thereby generating clusters across multiple samples. user need map cluster labels samples. example, cluster 1 represents cell type three samples, without needing explicit mapping samples.  spatial location (top) entropy distribution (bottom) clusters can compared multisample analysis, providing spatial context cluster cells neighbourhood compositions different samples.","code":"# for plotting with scater R package, we need to add the spatial coordinates  # to the reduced dimension section reducedDim(spe2, \"spatial\") <- spatialCoords(spe2)  # spatial plot spt_clust2 <- scater::plotReducedDim(spe2, colour_by = \"ClustSIGNAL\",                                     # specify spatial low dimension                                     dimred = \"spatial\", point_alpha = 1,                                     point_size = 4, scattermore = TRUE) +   scale_color_manual(values = colors) +   facet_wrap(vars(spe2[[samples]]), scales = \"free\", nrow = 1) +   guides(colour = guide_legend(title = \"Clusters\",                                override.aes = list(size = 3))) +   theme(text = element_text(size = 12)) ## Scale for colour is already present. ## Adding another scale for colour, which will replace the existing scale. # For cluster-level entropy distribution, we reorder the clusters by their  # median entropy value in each sample df_met2 <- spe2 |> colData() %>% as.data.frame()  box_clust2 <- list() for (s in samplesList) {   df_met_sub <- df_met2[df_met2[[samples]] == s, ]   # calculating median entropy of each cluster in a sample   ct_ent2 <- df_met_sub %>%     group_by(as.character(ClustSIGNAL)) %>%     summarise(mdEntropy = median(entropy))   # reordering clusters by their median entropy   # low to high median entropy   cellOrder2 <- ct_ent2$mdEntropy   names(cellOrder2) <- ct_ent2$`as.character(ClustSIGNAL)`   cellOrder2 <- sort(cellOrder2)   df_met_sub$ClustSIGNAL <- factor(df_met_sub$ClustSIGNAL,                                     levels = names(cellOrder2))    # box plot of cluster entropy   col_ent2 <- colors[as.numeric(names(cellOrder2))]   box_clust2[[s]] <- df_met_sub %>%     ggplot(aes(x = ClustSIGNAL, y = entropy, fill = ClustSIGNAL)) +     geom_boxplot() +     scale_fill_manual(values = col_ent2) +     facet_wrap(vars(samples), nrow = 1) +     labs(x = \"ClustSIGNAL clusters\", y = \"Entropy\") +     ylim(0, NA) +     theme_classic() +     theme(strip.text = element_blank(),           legend.position = \"none\",           text = element_text(size = 12),           axis.text.x = element_text(angle = 90, vjust = 0.5)) }  spt_clust2 / (patchwork::wrap_plots(box_clust2[1:3], nrow = 1) +                plot_layout(axes = \"collect\")) +   plot_layout(guides = \"collect\", heights = c(5, 3)) +   plot_annotation(     title = \"Spatial (top) and entropy (bottom) distributions of clusters\")"},{"path":"https://sydneybiox.github.io/clustSIGNAL/articles/clustSIGNAL.html","id":"visualising-entropy-spread-and-distribution","dir":"Articles","previous_headings":"Multisample analysis with ClustSIGNAL","what":"Visualising entropy spread and distribution","title":"ClustSIGNAL tutorial","text":"multisample analysis, spread (top) spatial distribution (bottom) region entropy measures can useful assessing comparing tissue structure samples.","code":"# we can assess the overall entropy distribution of each sample in the dataset hst_ent2 <- spe2 |> colData() %>%    as.data.frame() %>%   ggplot(aes(entropy)) +   geom_histogram(binwidth = 0.05) +   facet_wrap(vars(samples), nrow = 1) +   labs(x = \"Entropy\", y = \"Number of regions\") +   theme_classic() +   theme(text = element_text(size = 12))  spt_ent2 <- scater::plotReducedDim(spe2, colour_by = \"entropy\",                                   # specify spatial low dimension                                   dimred = \"spatial\", point_alpha = 1,                                   point_size = 4, scattermore = TRUE) +   scale_colour_gradient2(\"Entropy\", low = \"grey\", high = \"blue\") +   scale_size_continuous(range = c(0, max(spe$entropy))) +   facet_wrap(vars(spe2[[samples]]), scales = \"free\", nrow = 1) +   theme(strip.text = element_blank(),         text = element_text(size = 12)) ## Scale for colour is already present. ## Adding another scale for colour, which will replace the existing scale. hst_ent2 / spt_ent2 + plot_layout(heights = c(3,5)) +     plot_annotation(       title = \"Entropy spread (top) and spatial distribution (bottom)\")"},{"path":"https://sydneybiox.github.io/clustSIGNAL/articles/clustSIGNAL.html","id":"clustsignal-step-by-step-run","dir":"Articles","previous_headings":"","what":"ClustSIGNAL step-by-step run","title":"ClustSIGNAL tutorial","text":"ClustSIGNAL five main functions distinct step algorithm. functions accessible users can run sequentially generate data intermediate steps, needed. example, ClustSIGNAL can run step--step entropy measurement component, without run complete method. entropy values added SpatialExperiment object can used assessing tissue structure terms “domainness”. , describe individual ClustSIGNAL functions can used sequentially.","code":"data(mEmbryo2) # this will load the logcounts and metadata to the environment  # as before, we read the data into a SpatialExperiment object spe <- SpatialExperiment(assays = list(logcounts = me_expr),                          colData = me_data, spatialCoordsNames = c(\"X\", \"Y\")) set.seed(100) # for reproducibility # first we need to generate low dimension data for initial clustering spe <- scater::runPCA(spe) # The first step in the ClustSIGNAL algorithm is \"initial clustering\".  # For this, we need only provide the spe object and low embedding information.  # Other parameters have default values: batch = FALSE, batch_by = \"None\",  # threads = 1, clustParams = list(clust_c = 0, subclust_c = 0, iter.max = 30,  # k = 5, cluster.fun = \"louvain\") spe <- clustSIGNAL::p1_clustering(spe, dimRed = \"PCA\") ## [1] \"Initial nonspatial clustering performed. Clusters = 11 Time 23:17:31\" ## [1] \"Nonspatial subclustering performed. Subclusters = 50 Time 23:17:32\" # The cluster and subcluster labels are added to the spe object under cell  # metadata spe$nsCluster |> head() # clustering output ## [1] 8 8 8 8 3 8 ## Levels: 1 2 3 4 5 6 7 8 9 10 11 spe$initCluster |> head() # subclustering output (aka 'initial clusters' here) ## embryo2_Pos29_cell100_z2 embryo2_Pos29_cell101_z5 embryo2_Pos29_cell104_z2  ##                      8.2                      8.2                      8.2  ## embryo2_Pos29_cell104_z5 embryo2_Pos29_cell105_z2 embryo2_Pos29_cell108_z5  ##                      8.2                      3.4                      8.2  ## 50 Levels: 1.1 1.2 1.3 10.1 10.2 10.3 10.4 10.5 11.1 11.2 11.3 2.1 2.2 ... 9.3 # The second step involves detecting the neighborhood of all cells.  # We only need the spe object containing the initial clusters labels and sample  # IDs for this. By default, ClustSIGNAL identifies NN = 30 nearest neighbors,  # sorts the neighbourhood (sort = TRUE), and does not use parallel runs  # (threads = 1) outReg <- clustSIGNAL::neighbourDetect(spe, samples = \"sample_id\") ## [1] \"Regions defined. Time 23:17:35\" # This step generates a list of neighbourhood information. outReg$nnCells[1:3, 1:3] # a neighborhood matrix with cell IDs ##                          [,1]                       [,2]                       ## embryo2_Pos29_cell100_z2 \"embryo2_Pos29_cell100_z2\" \"embryo2_Pos29_cell90_z5\"  ## embryo2_Pos29_cell101_z5 \"embryo2_Pos29_cell101_z5\" \"embryo2_Pos29_cell117_z2\" ## embryo2_Pos29_cell104_z2 \"embryo2_Pos29_cell104_z2\" \"embryo2_Pos29_cell94_z5\"  ##                          [,3]                       ## embryo2_Pos29_cell100_z2 \"embryo2_Pos29_cell104_z2\" ## embryo2_Pos29_cell101_z5 \"embryo2_Pos29_cell97_z5\"  ## embryo2_Pos29_cell104_z2 \"embryo2_Pos29_cell100_z2\" outReg$regXclust[[1]] # a list of arrays containing initial cluster proportions ## arr ##       10.4        3.4        7.1        7.3        8.2        8.5  ## 0.03333333 0.03333333 0.03333333 0.03333333 0.83333333 0.03333333 # The third step is to calculate entropy of each neighborhood.  # We only need the spe object and initial cluster proportions for this step, and  # it can run in parallel, by default with 1 core spe <- clustSIGNAL::entropyMeasure(spe, outReg$regXclust) ## [1] \"Region domainness calculated. Time 23:17:35\" # The entropy values are added to the spe object under cell metadata spe$entropy |> head() # entropy values ## [1] 1.03701 0.42003 0.62749 0.76651 0.56651 0.21084 # The fourth step is to perform adaptive smoothing. # This requires the spe object containing the entropy values and a neighborhood  # matrix of cell IDs. Other parameters for which default values are provided  # include number of neighbors (NN = 30), weight distribution type (kernel =  # \"G\" for Gaussian), distribution spread (spread = 0.05 representing standard  # deviation for Gaussian distribution), and number of cores (threads = 1) to use # for parallel runs. spe <- clustSIGNAL::adaptiveSmoothing(spe, outReg$nnCells) ## [1] \"Smoothing performed. NN = 30 Kernel = G Spread = 0.05 Time 23:17:35\" # The adaptively smoothed gene expression data are added to the spe object under  # assays spe # 'smoothed' assay in the spe object ## class: SpatialExperiment  ## dim: 351 5000  ## metadata(0): ## assays(2): logcounts smoothed ## rownames(351): Abcc4 Acp5 ... Zfp57 Zic3 ## rowData names(0): ## colnames(5000): embryo2_Pos29_cell100_z2 embryo2_Pos29_cell101_z5 ... ##   embryo2_Pos50_cell97_z5 embryo2_Pos50_cell99_z5 ## colData names(7): uniqueID pos ... initCluster entropy ## reducedDimNames(1): PCA ## mainExpName: NULL ## altExpNames(0): ## spatialCoords names(2) : X Y ## imgData names(1): sample_id # Finally, the fifth step involves performing clustering on the adaptively  # smoothed data. # We only need to provide the spe object containing the adaptively smoothed  # data. This step has the same default parameters as the first step of initial  # clustering.  spe <- clustSIGNAL::p2_clustering(spe) ## [1] \"Nonspatial clustering performed on smoothed data. Clusters = 16 Time 23:17:37\" # The cluster labels are added to the spe object under cell metadata spe$ClustSIGNAL |> head() # ClustSIGNAL cluster labels ## [1] 13 13 13 13 13 13 ## Levels: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 sessionInfo() ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] scater_1.34.0               scuttle_1.16.0              ##  [3] scattermore_1.2             patchwork_1.3.0             ##  [5] ggplot2_3.5.1               dplyr_1.1.4                 ##  [7] aricode_1.0.3               cluster_2.1.6               ##  [9] distances_0.1.11            clustSIGNAL_0.99.7          ## [11] SpatialExperiment_1.16.0    SingleCellExperiment_1.28.1 ## [13] SummarizedExperiment_1.36.0 Biobase_2.66.0              ## [15] GenomicRanges_1.58.0        GenomeInfoDb_1.42.1         ## [17] IRanges_2.40.1              S4Vectors_0.44.0            ## [19] BiocGenerics_0.52.0         MatrixGenerics_1.18.0       ## [21] matrixStats_1.4.1           BiocStyle_2.34.0            ##  ## loaded via a namespace (and not attached): ##  [1] gridExtra_2.3           rlang_1.1.4             magrittr_2.0.3          ##  [4] compiler_4.4.2          systemfonts_1.1.0       vctrs_0.6.5             ##  [7] reshape2_1.4.4          stringr_1.5.1           pkgconfig_2.0.3         ## [10] crayon_1.5.3            fastmap_1.2.0           magick_2.8.5            ## [13] XVector_0.46.0          labeling_0.4.3          utf8_1.2.4              ## [16] rmarkdown_2.29          UCSC.utils_1.2.0        ggbeeswarm_0.7.2        ## [19] ragg_1.3.3              xfun_0.49               bluster_1.16.0          ## [22] zlibbioc_1.52.0         cachem_1.1.0            beachmat_2.22.0         ## [25] jsonlite_1.8.9          DelayedArray_0.32.0     BiocParallel_1.40.0     ## [28] irlba_2.3.5.1           parallel_4.4.2          R6_2.5.1                ## [31] bslib_0.8.0             stringi_1.8.4           jquerylib_0.1.4         ## [34] Rcpp_1.0.13-1           bookdown_0.41           knitr_1.49              ## [37] Matrix_1.7-1            igraph_2.1.2            tidyselect_1.2.1        ## [40] abind_1.4-8             yaml_2.3.10             viridis_0.6.5           ## [43] codetools_0.2-20        lattice_0.22-6          tibble_3.2.1            ## [46] plyr_1.8.9              withr_3.0.2             evaluate_1.0.1          ## [49] desc_1.4.3              pillar_1.10.0           BiocManager_1.30.25     ## [52] generics_0.1.3          munsell_0.5.1           scales_1.3.0            ## [55] glue_1.8.0              tools_4.4.2             BiocNeighbors_2.0.1     ## [58] ScaledMatrix_1.14.0     fs_1.6.5                cowplot_1.1.3           ## [61] grid_4.4.2              colorspace_2.1-1        GenomeInfoDbData_1.2.13 ## [64] beeswarm_0.4.0          BiocSingular_1.22.0     vipor_0.4.7             ## [67] cli_3.6.3               rsvd_1.0.5              textshaping_0.4.1       ## [70] S4Arrays_1.6.0          viridisLite_0.4.2       gtable_0.3.6            ## [73] sass_0.4.9              digest_0.6.37           SparseArray_1.6.0       ## [76] ggrepel_0.9.6           farver_2.1.2            rjson_0.2.23            ## [79] htmltools_0.5.8.1       pkgdown_2.1.1           lifecycle_1.0.4         ## [82] httr_1.4.7              harmony_1.2.3"},{"path":"https://sydneybiox.github.io/clustSIGNAL/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pratibha Panwar. Maintainer, author, contributor. Boyi Guo. Author. Haowen Zhao. Author. Stephanie Hicks. Author. Shila Ghazanfar. Author, contributor.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Panwar P, Guo B, Zhao H, Hicks S, Ghazanfar S (2025). clustSIGNAL: clustSIGNAL: spatial clustering method. R package version 0.99.7, https://sydneybiox.github.io/clustSIGNAL/.","code":"@Manual{,   title = {clustSIGNAL: clustSIGNAL: a spatial clustering method},   author = {Pratibha Panwar and Boyi Guo and Haowen Zhao and Stephanie Hicks and Shila Ghazanfar},   year = {2025},   note = {R package version 0.99.7},   url = {https://sydneybiox.github.io/clustSIGNAL/}, }"},{"path":"https://sydneybiox.github.io/clustSIGNAL/index.html","id":"clustsignal","dir":"","previous_headings":"","what":"clustSIGNAL: a spatial clustering method","title":"clustSIGNAL: a spatial clustering method","text":"ClustSIGNAL: Clustering Spatially Informed Gene expression Neighbourhood Adapted Learning. R package perform spatially-resolved clustering spatial transcriptomics data. , calculate entropy measure “domainness” cell neighbourhoods use generate weight distributions perform adaptive smoothing gene expression. Homogeneous neighbourhoods low entropy, , smoothing performed cells neighbourhoods. Contrarily, heterogeneous neighbourhoods high entropy smoothed much smaller region. approach overcomes data sparsity gene expression also incorporates spatial context form cell arrangement information neighbourhood. resulting adaptively smoothed gene expression used downstream analyses like clustering. tutorial use ClustSIGNAL, see vignette website.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"clustSIGNAL: a spatial clustering method","text":"install ClustSIGNAL via Bioconductor: install ClustSIGNAL GitHub:","code":"library(BiocManager) BiocManager::install(\"clustSIGNAL\") # install.packages(\"devtools\") devtools::install_github(\"SydneyBioX/clustSIGNAL\")"},{"path":"https://sydneybiox.github.io/clustSIGNAL/index.html","id":"method-description","dir":"","previous_headings":"","what":"Method description","title":"clustSIGNAL: a spatial clustering method","text":"Figure: ClustSIGNAL method overview. , present ClustSIGNAL, spatial clustering method developed handle data sparsity considering variability cell arrangement tissue regions. core steps involved method sequential: 1. method starts non-spatial clustering subclustering (default louvain clustering) classify cells subclusters refer ‘putative cell type’ groups. 2. neighbourhood cell defined terms ‘putative cell type’ group composition. 3. cells neighbourhood also sorted rearranged neighbours belonging ‘putative cell type’ group index cell placed closer . 4. Neighbourhood “domainness” measured entropy, high entropy values indicate heterogeneous neighbourhoods low entropy values indicate homogeneous neighbourhoods. 5. entropy values used generate weight distributions specific neighbourhood. 6. gene expressions cells adaptively smoothed using entropy-guided weight distributions; cells heterogeneous neighbourhoods (high entropy) undergo smoothing smaller region, whereas cells homogeneous neighbourhoods (low entropy) undergo smoothing larger region. 7. Non-spatial clustering performed adaptively smoothed gene expression generate ClustSIGNAL clusters represent cell types.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/index.html","id":"clustsignal-parameters","dir":"","previous_headings":"","what":"ClustSIGNAL parameters","title":"clustSIGNAL: a spatial clustering method","text":"clustSIGNAL package uses SpatialExperiment object input. provide users number parameters explore experiment , well prior tested default values quick runs. clustSIGNAL can used single sample multisample analysis just one function call. list parameters offered possible values: spe - SpatialExperiment object cell spatial coordinates matrix normalized counts gene expression. samples - column name cell metadata containing sample names. dimRed - dimensionality reduction method name low embedding data. Default value “None”, case PCA calculated used low dimension data. batch - whether batch correction performed. Default value FALSE. batch_by - column name cell metadata containing groups perform batch correction. NN - neighbourhood size terms number nearest neighbours consider. Value > 1. Default value 30. kernel - type weight distribution use. Can Gaussian (default) exponential distribution. spread - value distribution parameter - standard deviation Gaussian distribution rate exponential distribution. Default value 0.05, recommended Gaussian distribution. exponential distribution, recommended value 20. sort - whether cell neighbourhoods sorted ‘putative cell type’ grouping. Default value True. threads - number cpus use parallel runs. Default value 1. outputs - choice output types. Default value ‘c’ list containing data frame cell IDs cluster numbers. possible value “n” list dataframe clusters plus neighbourhood matrix, “s” list dataframe clusters plus final SpatialExperiment object, “” list 3 outputs - cluster dataframe, neighbourhood matrix, spe object. clustParams - parameter options TwoStepParam clustering methods bluster package. clustering parameters order - centers (centers) clustering KmeansParam, centers (centers) sub-clustering clusters KmeansParam, maximum iterations (iter.max) clustering KmeansParam, k values (k) clustering NNGraphParam, community detection method (cluster.fun) use NNGraphParam.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/index.html","id":"running-clustsignal","dir":"","previous_headings":"","what":"Running ClustSIGNAL","title":"clustSIGNAL: a spatial clustering method","text":"running ClustSIGNAL, important ensure SpatialExperiment object input spatial coordinates stored spatialCoords matrix. Otherwise, method throw error asking user provide spatial coordinates.","code":"# load required packages library(clustSIGNAL)  data(example)  # Here, the sample labels are in 'sample_id' column. set.seed(100) res <- clustSIGNAL(spe, samples = \"sample_id\", outputs = \"a\")"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/ClustSignal_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data with SpatialExperiment object — ClustSignal_example","title":"Example data with SpatialExperiment object — ClustSignal_example","text":"example data generated mouse embryo spatial transcriptomics dataset 3 mouse embryos, 351 genes total 57536 cells. running examples, subset data selecting 1000 random cells embryo 2, excluding cells annotated 'low quality'. subsetting, expression 351 genes 1000 cells embryo 2.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/ClustSignal_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data with SpatialExperiment object — ClustSignal_example","text":"","code":"data(ClustSignal_example)"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/ClustSignal_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data with SpatialExperiment object — ClustSignal_example","text":"spe spatialExperiment object containing gene expression matrix normalised counts, rows indicate genes columns indicate cells. Also, contains data frame cell metadata including cell IDs, sample IDs, cell type annotations, x-y coordinates cells. nnCells matrix row corresponds cell spe object, columns correspond nearest neighbors. regXclust list element corresponds cell spe object, contains cluster composition proportions.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/ClustSignal_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example data with SpatialExperiment object — ClustSignal_example","text":"Integration spatial single-cell transcriptomic data elucidates mouse organogenesis, Nature Biotechnology, 2021. Webpage: https://www.nature.com/articles/s41587-021-01006-2","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/adaptiveSmoothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Adaptive smoothing — adaptiveSmoothing","title":"Adaptive smoothing — adaptiveSmoothing","text":"function perform weighted, adaptive smoothing gene expression based heterogeneity cell neighbourhood. Heterogeneous neighbourhoods smoothed less higher weights given cells belonging initial group. Homogeneous neighbourhoods smoothed similar weights given cells.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/adaptiveSmoothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adaptive smoothing — adaptiveSmoothing","text":"","code":"adaptiveSmoothing(spe, nnCells, NN = 30, kernel = \"G\", spread = 0.05)"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/adaptiveSmoothing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adaptive smoothing — adaptiveSmoothing","text":"spe SpatialExperiment object logcounts, PCA, 'putative cell type' groups, entropy outputs included. nnCells character matrix NN nearest neighbours - rows cells columns nearest neighbours ranged closest farthest neighbour. sort = TRUE, neighbours belonging 'putative cell type' group cell moved closer . NN integer number neighbourhood cells function consider. value must greater equal 1. Default value 30. kernel character type distribution used. two valid values \"G\" \"E\". G Gaussian distribution, E exponential distribution. Default value \"G\". spread numeric value distribution spread, represented standard deviation Gaussian distribution rate exponential distribution. Default value 0.05 Gaussian distribution 20 exponential distribution.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/adaptiveSmoothing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adaptive smoothing — adaptiveSmoothing","text":"SpatialExperiment object including smoothed gene expression values another assay.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/adaptiveSmoothing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adaptive smoothing — adaptiveSmoothing","text":"","code":"data(ClustSignal_example)  # requires matrix containing NN nearest neighbour cell labels (nnCells), # generated using the neighbourDetect() function spe <- clustSIGNAL::adaptiveSmoothing(spe, nnCells) #> [1] \"Smoothing performed. NN = 30 Kernel = G Spread = 0.05 Time 23:16:49\" spe #> class: SpatialExperiment  #> dim: 351 1000  #> metadata(0): #> assays(2): logcounts smoothed #> rownames(351): Abcc4 Acp5 ... Zfp57 Zic3 #> rowData names(0): #> colnames(1000): embryo2_Pos29_cell110_z2 embryo2_Pos29_cell117_z2 ... #>   embryo2_Pos50_cell361_z5 embryo2_Pos50_cell372_z2 #> colData names(5): uniqueID sample_id entropy nsCluster initCluster #> reducedDimNames(1): PCA #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : X Y #> imgData names(1): sample_id"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/clustSIGNAL.html","id":null,"dir":"Reference","previous_headings":"","what":"ClustSIGNAL — clustSIGNAL","title":"ClustSIGNAL — clustSIGNAL","text":"clustering method cell type classification spatial transcriptomics data. tool generates uses adaptively smoothed, spatially informed gene expression data clustering.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/clustSIGNAL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClustSIGNAL — clustSIGNAL","text":"","code":"clustSIGNAL(   spe,   samples,   dimRed = \"None\",   batch = FALSE,   batch_by = \"None\",   NN = 30,   kernel = \"G\",   spread = 0.05,   sort = TRUE,   threads = 1,   outputs = \"c\",   clustParams = list(clust_c = 0, subclust_c = 0, iter.max = 30, k = 5, cluster.fun =     \"louvain\") )"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/clustSIGNAL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClustSIGNAL — clustSIGNAL","text":"spe SpatialExperiment object. samples character indicating name colData(spe) column containing sample names. dimRed character indicating name reduced dimensions use SpatialExperiment object (.e., reducedDimNames(spe)). Default value 'None'. batch logical parameter whether perform batch correction. Default value FALSE. batch_by character indicating name colData(spe) column containing batch names. NN integer number neighbourhood cells function consider. value must greater equal 1. Default value 30. kernel character type distribution used. two valid values \"G\" \"E\". G Gaussian distribution, E exponential distribution. Default value \"G\". spread numeric value distribution spread, represented standard deviation Gaussian distribution rate exponential distribution. Default value 0.05 Gaussian distribution 20 exponential distribution. sort logical parameter whether sort neighbourhood region description. Default value TRUE. threads numeric value number CPU cores used analysis. Default value set 1. outputs character type output return user. \"c\" data frame cell IDs respective cluster numbers (default), \"n\" dataframe clusters plus neighbourhood matrix, \"s\"  dataframe clusters plus final spatialExperiment object, \"\" outputs. clustParams list parameters TwoStepParam clustering methods. clustering parameters order - centers (centers) clustering KmeansParam, centers (centers) sub-clustering clusters KmeansParam, maximum iterations (iter.max) clustering KmeansParam, k values (k) clustering NNGraphParam, community detection method (cluster.fun) use NNGraphParam.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/clustSIGNAL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ClustSIGNAL — clustSIGNAL","text":"list outputs depending type outputs specified main function call. 1. clusters: data frame cell names cluster classification. 2. neighbours: character matrix containing cells IDs cell's neighbours 3. spe_final: SpatialExperiment object initial 'putative cell type' groups, entropy values, smoothed gene expression, post-smoothing clusters, silhouette widths included.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/clustSIGNAL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ClustSIGNAL — clustSIGNAL","text":"","code":"data(ClustSignal_example)  names(colData(spe)) #> [1] \"uniqueID\"    \"sample_id\"   \"entropy\"     \"nsCluster\"   \"initCluster\" # identify the column name with sample labels samples = \"sample_id\" res_list <- clustSIGNAL(spe, samples, outputs = \"c\") #> [1] \"Calculating PCA. Time 23:16:50\" #> [1] \"ClustSIGNAL run started. Time 23:16:50\" #> [1] \"Initial nonspatial clustering performed. Clusters = 6 Time 23:16:50\" #> Warning: You're computing too large a percentage of total singular values, use a standard svd instead. #> Warning: You're computing too large a percentage of total singular values, use a standard svd instead. #> [1] \"Nonspatial subclustering performed. Subclusters = 17 Time 23:16:51\" #> [1] \"Regions defined. Time 23:16:52\" #> [1] \"Region domainness calculated. Time 23:16:52\" #> [1] \"Smoothing performed. NN = 30 Kernel = G Spread = 0.05 Time 23:16:52\" #> [1] \"Nonspatial clustering performed on smoothed data. Clusters = 9 Time 23:16:52\" #> [1] \"ClustSIGNAL run completed. 23:16:52\" #> Time difference of 2.608634 secs"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-calculateProp.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell neighbourhood composition — .calculateProp","title":"Cell neighbourhood composition — .calculateProp","text":"function calculate cell neighbourhood composition 'putative' cell types.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-calculateProp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell neighbourhood composition — .calculateProp","text":"","code":".calculateProp(arr)"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-calculateProp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cell neighbourhood composition — .calculateProp","text":"arr vector 'putative cell type' assignments cell neighbourhood.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-calculateProp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cell neighbourhood composition — .calculateProp","text":"table 'putative cell type' proportions neighbourhood.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-cellName.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighbour cell naming — .cellName","title":"Neighbour cell naming — .cellName","text":"function fetch cell IDs.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-cellName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighbour cell naming — .cellName","text":"","code":".cellName(cell, Clust)"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-cellName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighbour cell naming — .cellName","text":"cell vector neighbourhood cell indices. cell indices indicate row number cells sample metadata. Clust data frame initial cluster assignments cells sample.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-cellName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neighbour cell naming — .cellName","text":"data frame cell IDs neighbourhood cells.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-cellNameSort.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighbour cell sorting — .cellNameSort","title":"Neighbour cell sorting — .cellNameSort","text":"function perform neighbourhood cell sorting. Neighbourhood cells belong 'putative cell type' central cell moved closer central cell.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-cellNameSort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighbour cell sorting — .cellNameSort","text":"","code":".cellNameSort(cell, Clust)"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-cellNameSort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighbour cell sorting — .cellNameSort","text":"cell vector neighbourhood cell indices. cell indices indicate row number cells sample metadata. Clust data frame initial cluster assignments cells sample.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-cellNameSort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neighbour cell sorting — .cellNameSort","text":"data frame cell IDs sorted neighbourhood cells.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-clustNum.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighbour cell 'putative cell type' assignment — .clustNum","title":"Neighbour cell 'putative cell type' assignment — .clustNum","text":"function fetch 'putative cell type' assignments cell.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-clustNum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighbour cell 'putative cell type' assignment — .clustNum","text":"","code":".clustNum(cell, subClust)"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-clustNum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighbour cell 'putative cell type' assignment — .clustNum","text":"cell vector neighbourhood cell indices. cell indices indicate row number cells sample metadata. subClust data frame 'putative cell type' assignments cells sample.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-clustNum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neighbour cell 'putative cell type' assignment — .clustNum","text":"data frame 'putative cell type' assignments neighbourhood cells.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-exp_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential distribution weights — .exp_kernel","title":"Exponential distribution weights — .exp_kernel","text":"function generate weights exponential distribution.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-exp_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential distribution weights — .exp_kernel","text":"","code":".exp_kernel(ed, NN, rate)"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-exp_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential distribution weights — .exp_kernel","text":"ed numeric vector entropy values cell neighbourhoods. NN integer number neighbourhood cells function consider. value must greater equal 1. Default value 30. rate numeric value rate exponential distribution.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-exp_kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential distribution weights — .exp_kernel","text":"matrix column contains weights related specific entropy values.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-gauss_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian distribution weights — .gauss_kernel","title":"Gaussian distribution weights — .gauss_kernel","text":"function generate weights Gaussian distribution.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-gauss_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian distribution weights — .gauss_kernel","text":"","code":".gauss_kernel(ed, NN, sd)"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-gauss_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gaussian distribution weights — .gauss_kernel","text":"ed numeric vector entropy values cell neighbourhoods. NN integer number neighbourhood cells function consider. value must greater equal 1. Default value 30. sd numeric value standard deviation Gaussian distribution.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-gauss_kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gaussian distribution weights — .gauss_kernel","text":"matrix column contains weights related specific entropy values.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-generateBPParam.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating BPParam object — .generateBPParam","title":"Generating BPParam object — .generateBPParam","text":"utility function generate BPPARAM object.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-generateBPParam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating BPParam object — .generateBPParam","text":"","code":".generateBPParam(cores = 1)"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-generateBPParam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating BPParam object — .generateBPParam","text":"cores Desired number cores BPPARAM object.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/dot-generateBPParam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating BPParam object — .generateBPParam","text":"BPPPARAM object.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/entropyMeasure.html","id":null,"dir":"Reference","previous_headings":"","what":"Domainness measure — entropyMeasure","title":"Domainness measure — entropyMeasure","text":"function measure heterogeneity cell's neighbourhood terms entropy, homogeneous neighbourhoods low entropy heterogeneous neighbourhoods high entropy.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/entropyMeasure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Domainness measure — entropyMeasure","text":"","code":"entropyMeasure(spe, regXclust, threads = 1)"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/entropyMeasure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Domainness measure — entropyMeasure","text":"spe SpatialExperiment object logcounts, PCA, 'putative cell type' groups included. regXclust list vectors cell's neighbourhood composition indicated proportion 'putative cell type' groups contains. threads numeric value number CPU cores used analysis.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/entropyMeasure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Domainness measure — entropyMeasure","text":"SpatialExperiment object including entropy values cell neighbourhood.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/entropyMeasure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Domainness measure — entropyMeasure","text":"","code":"data(ClustSignal_example)  # requires list containing cluster proportions of each region (regXclust), # generated using the neighbourDetect() function spe <- clustSIGNAL::entropyMeasure(spe, regXclust) #> [1] \"Region domainness calculated. Time 23:16:53\" spe$entropy |> head() #> [1] 0.46900 0.21084 0.69984 0.35336 0.81185 0.35336"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/mEmbryo2.html","id":null,"dir":"Reference","previous_headings":"","what":"Mouse Embryo Data — mEmbryo2","title":"Mouse Embryo Data — mEmbryo2","text":"dataset contains spatial transcriptomics data 3 mouse embryos, 351 genes total 57536 cells. vignettes, subset data randomly selecting 5000 cells embryo 2, excluding cells annotated 'low quality'.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/mEmbryo2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mouse Embryo Data — mEmbryo2","text":"","code":"data(mEmbryo2)"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/mEmbryo2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mouse Embryo Data — mEmbryo2","text":"me_expr gene expression matrix normalised counts, rows indicate genes columns indicate cells. me_data data frame cell metadata including cell IDs, sample IDs, cell type annotations, x-y coordinates cells.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/mEmbryo2.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mouse Embryo Data — mEmbryo2","text":"Integration spatial single-cell transcriptomic data elucidates mouse organogenesis, Nature Biotechnology, 2021. Webpage: https://www.nature.com/articles/s41587-021-01006-2","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/mHypothal.html","id":null,"dir":"Reference","previous_headings":"","what":"Mouse Hypothalamus Data — mHypothal","title":"Mouse Hypothalamus Data — mHypothal","text":"dataset contains spatial transcriptomics data 181 mouse hypothalamus samples, 155 genes total 1,027,080 cells. running vignettes, subset data selecting total 6000 cells 3 samples - Animal 1 Bregma -0.09 (2080 cells) Animal 7 Bregmas 0.16 (1936 cells) -0.09 (1984 cells), excluding cells annotated 'ambiguous', removed 20 genes assessed using different technology.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/mHypothal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mouse Hypothalamus Data — mHypothal","text":"","code":"data(mHypothal)"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/mHypothal.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mouse Hypothalamus Data — mHypothal","text":"mh_expr gene expression matrix normalised counts, rows indicate genes columns indicate cells. mh_data data frame cell metadata including cell IDs, sample IDs, cell type annotations, x-y coordinates cells.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/mHypothal.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mouse Hypothalamus Data — mHypothal","text":"Molecular, Spatial Functional Single-Cell Profiling Hypothalamic Preoptic Region, Science, 2018. Webpage: https://www.science.org/doi/10.1126/science.aau5324","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/neighbourDetect.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell neighbourhood detection — neighbourDetect","title":"Cell neighbourhood detection — neighbourDetect","text":"function identify neighbourhood cell. sort = TRUE, neighbourhoods also sorted cells belonging group central cell arranged closer .","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/neighbourDetect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell neighbourhood detection — neighbourDetect","text":"","code":"neighbourDetect(spe, samples, NN = 30, sort = TRUE, threads = 1)"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/neighbourDetect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cell neighbourhood detection — neighbourDetect","text":"spe SpatialExperiment object logcounts, PCA, 'initial cluster' groups included. samples character vector sample names cells belong. Length vector must equal number cells spatialExperiment object (.e. number rows colData(spe)). NN integer number neighbourhood cells function consider. value must greater equal 1. Default value 30. sort logical parameter whether sort neighbourhood region description. Default value TRUE. threads numeric value number CPU cores used analysis. Default value set 1.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/neighbourDetect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cell neighbourhood detection — neighbourDetect","text":"list containing two items: 1. nnCells, character matrix NN nearest neighbours - rows cells columns nearest neighbours ranged closest farthest neighbour. sort = TRUE, neighbours belonging 'putative cell type' group cell moved closer . 2. regXclust, list vectors cell's neighbourhood composition indicated proportion 'putative cell type' groups contains.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/neighbourDetect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cell neighbourhood detection — neighbourDetect","text":"","code":"data(ClustSignal_example)  out_list <- clustSIGNAL::neighbourDetect(spe, samples = \"sample_id\") #> [1] \"Regions defined. Time 23:16:54\" out_list |> names() #> [1] \"nnCells\"   \"regXclust\""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/p1_clustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial non-spatial clustering — p1_clustering","title":"Initial non-spatial clustering — p1_clustering","text":"function perform initial non-spatial clustering sub-clustering normalised gene expression generate 'initial clusters'.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/p1_clustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial non-spatial clustering — p1_clustering","text":"","code":"p1_clustering(   spe,   dimRed = \"None\",   batch = FALSE,   batch_by = \"None\",   threads = 1,   clustParams = list(clust_c = 0, subclust_c = 0, iter.max = 30, k = 5, cluster.fun =     \"louvain\") )"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/p1_clustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial non-spatial clustering — p1_clustering","text":"spe SpatialExperiment object. reclust = FALSE, object contain logcounts PCA, reculst = TRUE, object contain smoothed gene expression. dimRed character indicating name reduced dimensions use SpatialExperiment object (.e., reducedDimNames(spe)). Default value 'PCA'. batch logical parameter whether perform batch correction. Default value FALSE. batch_by character indicating name colData(spe) column containing batch names. threads numeric value number CPU cores used analysis. Default value set 1. clustParams list parameters TwoStepParam clustering methods. clustering parameters order - centers (centers) clustering KmeansParam, centers (centers) sub-clustering clusters KmeansParam, maximum iterations (iter.max) clustering KmeansParam, k values (k) clustering NNGraphParam, community detection method (cluster.fun) use NNGraphParam.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/p1_clustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initial non-spatial clustering — p1_clustering","text":"SpatialExperiment object containing 'initial cluster' groups allotted cell.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/p1_clustering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initial non-spatial clustering — p1_clustering","text":"","code":"data(ClustSignal_example)  spe <- clustSIGNAL::p1_clustering(spe, dimRed = \"PCA\") #> [1] \"Initial nonspatial clustering performed. Clusters = 7 Time 23:16:55\" #> Warning: You're computing too large a percentage of total singular values, use a standard svd instead. #> Warning: You're computing too large a percentage of total singular values, use a standard svd instead. #> Warning: You're computing too large a percentage of total singular values, use a standard svd instead. #> [1] \"Nonspatial subclustering performed. Subclusters = 20 Time 23:16:55\" spe$nsCluster |> head() #> [1] 5 5 7 5 5 5 #> Levels: 1 2 3 4 5 6 7 spe$initCluster |> head() #> embryo2_Pos29_cell110_z2 embryo2_Pos29_cell117_z2 embryo2_Pos29_cell128_z2  #>                      5.2                      5.2                      7.1  #> embryo2_Pos29_cell134_z2  embryo2_Pos29_cell14_z2 embryo2_Pos29_cell141_z2  #>                      5.2                      5.2                      5.2  #> 20 Levels: 1.1 1.2 2.1 2.2 3.1 3.2 3.3 4.1 4.2 4.3 5.1 5.2 5.3 5.4 5.5 ... 7.3"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/p2_clustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Final non-spatial clustering — p2_clustering","title":"Final non-spatial clustering — p2_clustering","text":"function containing cluster adaptively smoothed gene expression data.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/p2_clustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Final non-spatial clustering — p2_clustering","text":"","code":"p2_clustering(   spe,   batch = FALSE,   batch_by = \"None\",   threads = 1,   clustParams = list(clust_c = 0, subclust_c = 0, iter.max = 30, k = 5, cluster.fun =     \"louvain\") )"},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/p2_clustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Final non-spatial clustering — p2_clustering","text":"spe SpatialExperiment object. reclust = FALSE, object contain logcounts PCA, reculst = TRUE, object contain smoothed gene expression. batch logical parameter whether perform batch correction. Default value FALSE. batch_by character indicating name colData(spe) column containing batch names. threads numeric value number CPU cores used analysis. Default value set 1. clustParams list parameters TwoStepParam clustering methods. clustering parameters order - centers (centers) clustering KmeansParam, centers (centers) sub-clustering clusters KmeansParam, maximum iterations (iter.max) clustering KmeansParam, k values (k) clustering NNGraphParam, community detection method (cluster.fun) use NNGraphParam.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/p2_clustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Final non-spatial clustering — p2_clustering","text":"SpatialExperiment object containing clusters generated smoothed data.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/reference/p2_clustering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Final non-spatial clustering — p2_clustering","text":"","code":"data(ClustSignal_example)  # For non-spatial clustering of normalised counts spe <- clustSIGNAL::p2_clustering(spe) #> [1] \"Nonspatial clustering performed on smoothed data. Clusters = 9 Time 23:16:57\" spe$ClustSIGNAL |> head() #> [1] 6 6 4 6 6 6 #> Levels: 1 2 3 4 5 6 7 8 9"},{"path":"https://sydneybiox.github.io/clustSIGNAL/news/index.html","id":"clustsignal-v0997-2025-01-08","dir":"Changelog","previous_headings":"","what":"clustSIGNAL v0.99.7 (2025-01-08)","title":"clustSIGNAL v0.99.7 (2025-01-08)","text":"Minor updates. Renamed example dataset example.RData ClustSignal_example.RData Updated DESCRIPTION file add bluster package version (>= 1.16.0) required run ClustSIGNAL.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/news/index.html","id":"clustsignal-v0996-2024-12-11","dir":"Changelog","previous_headings":"","what":"clustSIGNAL v0.99.6 (2024-12-11)","title":"clustSIGNAL v0.99.6 (2024-12-11)","text":"Modified adaptiveSmoothing() function improve runtime. Improved tutorial vignette content. Added step--step ClustSIGNAL run guide tutorial vignette. Removed user parameter cells. package automatically uses column names input SpatialExperiment object cell ID. Added cell id check - throws error duplicates found among column names input SpatialExperiment object.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/news/index.html","id":"clustsignal-v0995-2024-11-28","dir":"Changelog","previous_headings":"","what":"clustSIGNAL v0.99.5 (2024-11-28)","title":"clustSIGNAL v0.99.5 (2024-11-28)","text":"Fixed issue absence spatial coordinates throwing error beginning run.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/news/index.html","id":"clustsignal-v0994-2024-11-28","dir":"Changelog","previous_headings":"","what":"clustSIGNAL v0.99.4 (2024-11-28)","title":"clustSIGNAL v0.99.4 (2024-11-28)","text":"Corrected character check output format type.","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/news/index.html","id":"clustsignal-v0003-2024-10-31","dir":"Changelog","previous_headings":"","what":"clustSIGNAL v0.00.3 (2024-10-31)","title":"clustSIGNAL v0.00.3 (2024-10-31)","text":"Clustering parameter options added package Initial final clustering steps now separate functions Test units added package","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/news/index.html","id":"clustsignal-v0002-2024-10-08","dir":"Changelog","previous_headings":"","what":"clustSIGNAL v0.00.2 (2024-10-08)","title":"clustSIGNAL v0.00.2 (2024-10-08)","text":"Updated parallel runs smoothing function faster runs","code":""},{"path":"https://sydneybiox.github.io/clustSIGNAL/news/index.html","id":"clustsignal-v0990-2024-09-19","dir":"Changelog","previous_headings":"","what":"clustSIGNAL v0.99.0 (2024-09-19)","title":"clustSIGNAL v0.99.0 (2024-09-19)","text":"Submitted Bioconductor.","code":""}]
